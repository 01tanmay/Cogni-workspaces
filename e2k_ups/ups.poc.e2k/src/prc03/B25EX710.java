package prc03;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2020 CA Technologies. All rights reserved.
//
//    Name: B25EX710_SHM_BS_MBRS_LIST_2      Date: 2020/03/11
//    Target OS:   JVM                       Time: 16:48:33
//    Target DBMS: JDBC                      User: YWH0NKF
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.util.Date;
import java.math.*;
import java.sql.*;
import java.text.SimpleDateFormat;

import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class B25EX710 extends ABBase {
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// IMPORT VIEW CLASS VARIABLE
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	B25EX710_IA w_ia;
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// EXPORT VIEW CLASS VARIABLE
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	B25EX710_OA w_oa;
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// REPEATING GROUP VIEW STATUS FIELDS
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	boolean ExpGrpBaseMembers_FL_001;
	int ExpGrpBaseMembers_PS_001;
	boolean ExpGrpBaseMembers_RF_001;
	public final static int ExpGrpBaseMembers_MM_001 = 350;

	char OkEditsw;
	private String ImpBaseCode;
	private String ImpOrigCntryCode;
	private String ImpDestCntryCode;
	private String WorkEvaluationDate;
	private String ImpEvaluationDate;
	private double ImpInstanceId;
	private double ImpChargeCode;
	private char WkMemIsAllocated;
	private String ExpReturnCode;
	private String ExpReasonCode;
	private String ExpNextGrpInd;
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// MISC DECLARATIONS AND PROTOTYPES
	// FOLLOW AS NEEDED:
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// +-> B25EX710_SHM_BS_MBRS_LIST_2 03/11/2020 16:48
	// ! IMPORTS:
	// ! Work View imp eww_supplied (Transient, Optional,
	// ! Import only)
	// ! evaluation_date
	// ! Entity View imp_filter ich1_charge_base (Transient,
	// ! Mandatory, Import only)
	// ! base_code
	// ! origin_country_code
	// ! destination_country_code
	// ! Entity View imp_next_key ich1_charge_base (Transient,
	// ! Optional, Import only)
	// ! instance_id
	// ! charge_code
	// ! EXPORTS:
	// ! Work View exp eww_component (Transient, Export only)
	// ! return_code
	// ! reason_code
	// ! severity_code
	// ! rollback_indicator
	// ! origin_servid
	// ! Work View exp eww_supplied (Transient, Export only)
	// ! evaluation_date
	// ! next_group_ind
	// ! Group View (350) exp_grp_base_members
	// ! Entity View exp_grp_base_member ich1_charge_base
	// ! (Transient, Export only)
	// ! base_code
	// ! owning_charge_code
	// ! instance_id
	// ! charge_code
	// ! origin_country_code
	// ! destination_country_code
	// ! ppd_col_ind
	// ! effective_date
	// ! effective_end_date
	// ! has_been_deleted_ind
	// !
	// ! EXTERNAL ACTION BLOCK
	// !
	// 1 ! NOTE:
	// 1 !
	// 1 ! ****************************************************************
	// 1 ! Maintenance History:
	// 1 !
	// 1 ! MRF/RAF DATE INT LVL COMMENT
	// 1 ! G60024 11/11/02 JMGC 001 New program
	// 1 !
	// 1 ! ****************************************************************
	// 2 !
	// 3 ! NOTE:
	// 3 ! RETURN/REASON CODES
	// 3 ! +1/1 Processing Successful
	// 3 ! +1/2 List Empty
	// 3 ! -10/210 Base Code Not Found
	// 3 ! -10/208 Origin Country not valid
	// 3 ! -10/209 Destination Country not valid
	// 3 ! -20/216 Base Code missing in import
	// 3 ! -20/214 Origin Country code missing in import
	// 3 ! -20/215 Destination Country code missing in import
	// +---

	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// CONSTRUCTOR FOR THE CLASS
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	public B25EX710() {
		iefCGenRlse = "CA Gen 8.6";
		ssCopyright = "Copyright (c) 2020 CA Technologies. All rights reserved.";
		iefCGenDate = "2020/03/11";
		iefCGenTime = "16:48:33";
		iefCGenEncy = "9.2.A6";
		iefCGenUserId = "YWH0NKF";
		iefCGenModel = "EWW CHG CHARGES 01 02 D";
		iefCGenSubset = "ALL                             ";
		iefCGenName = "B25EX710_SHM_BS_MBRS_LIST_2";
		nestingLevel = 0;
		valChkDeadlockTimeout = false;
		valChkDBError = false;
	}
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// ACTION BLOCK FUNCTION DECLARATIONS
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	public void B25EX710(Object in_runtime_parm1, IRuntimePStepContext in_runtime_parm2, GlobData in_globdata,
			B25EX710_IA import_view, B25EX710_OA export_view) {
		iefRuntimeParm1 = in_runtime_parm1;
		iefRuntimeParm2 = in_runtime_parm2;
		globdata = in_globdata;
		w_ia = import_view;
		w_oa = export_view;
		_B25EX710();
	}

	private void _B25EX710() {

		try {
			f_22020403();
		} catch (ABException e) {
		}
	}

	public void f_22020403() throws ABException {

		// User-written code should be inserted here

		ExpGrpBaseMembers_PS_001 = 1;
		w_oa.ExpEwwComponentReturnCode = +1;
		w_oa.ExpEwwComponentReasonCode = +1;

		String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
		OkEditsw = 'Y';

		if (w_ia.ImpFilterIch1ChargeBaseBaseCode == null && w_ia.ImpFilterIch1ChargeBaseOriginCountryCode == null
				&& w_ia.ImpFilterIch1ChargeBaseDestinationCountryCode == null) {

			OkEditsw = 'N';
			w_oa.ExpEwwComponentReturnCode = -20;
			w_oa.ExpEwwComponentReasonCode = +100;
		} else if (w_ia.ImpFilterIch1ChargeBaseBaseCode == null) {

			OkEditsw = 'N';
			w_oa.ExpEwwComponentReturnCode = -20;
			w_oa.ExpEwwComponentReasonCode = +216;
		} else if (w_ia.ImpFilterIch1ChargeBaseOriginCountryCode == null) {

			OkEditsw = 'N';
			w_oa.ExpEwwComponentReturnCode = -20;
			w_oa.ExpEwwComponentReasonCode = +214;
		} else if (w_ia.ImpFilterIch1ChargeBaseDestinationCountryCode == null) {
			OkEditsw = 'N';
			w_oa.ExpEwwComponentReturnCode = -20;
			w_oa.ExpEwwComponentReasonCode = +215;
		} else {
			OkEditsw = 'Y';
			ImpBaseCode = w_ia.ImpFilterIch1ChargeBaseBaseCode;
		}

		if (OkEditsw == 'Y') {
			if (w_ia.ImpEwwSuppliedEvaluationDate <= 0) {
				w_oa.ExpEwwComponentReasonCode = +3;
				WorkEvaluationDate = currentDate;
			} else {
				w_oa.ExpEwwComponentReasonCode = +1;
				WorkEvaluationDate = Integer.toString(w_ia.ImpEwwSuppliedEvaluationDate);
			}
		}

		if (OkEditsw == 'Y') {
			ImpEvaluationDate = currentDate;
			ImpBaseCode = w_ia.ImpFilterIch1ChargeBaseBaseCode;
			ImpOrigCntryCode = w_ia.ImpFilterIch1ChargeBaseOriginCountryCode;
			ImpDestCntryCode = w_ia.ImpFilterIch1ChargeBaseDestinationCountryCode;
			ImpInstanceId = w_ia.ImpNextKeyIch1ChargeBaseInstanceId;
			// calling 711
			System.out.println("REFERENCE CHG BASES IN CORE MEMORY");
			
		}

		w_oa.ExpEwwComponentReturnCode = Integer.parseInt(ExpReturnCode);
		w_oa.ExpEwwComponentReasonCode = Integer.parseInt(ExpReasonCode);
		w_oa.ExpEwwSuppliedNextGroupInd = ExpNextGrpInd;

		if (w_oa.ExpEwwComponentReturnCode == 1) {
			w_oa.ExpEwwSuppliedEvaluationDate = Integer.parseInt(WorkEvaluationDate);
		} else {
			w_oa.ExpEwwSuppliedEvaluationDate = w_ia.ImpEwwSuppliedEvaluationDate;
		}
	}
}// end class
