package prc03;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2020 CA Technologies. All rights reserved.
//
//    Name: B25EX709_SHM_BS_CDS_LIST         Date: 2020/03/11
//    Target OS:   JVM                       Time: 16:48:32
//    Target DBMS: JDBC                      User: YWH0NKF
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.util.Date;
import java.math.*;
import java.sql.*;
import java.text.SimpleDateFormat;

import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class B25EX709 extends ABBase {
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// IMPORT VIEW CLASS VARIABLE
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	B25EX709_IA w_ia;
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// EXPORT VIEW CLASS VARIABLE
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	B25EX709_OA w_oa;
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// REPEATING GROUP VIEW STATUS FIELDS
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	boolean ExpGrpBaseCodes_FL_001;
	int ExpGrpBaseCodes_PS_001;
	boolean ExpGrpBaseCodes_RF_001;
	public final static int ExpGrpBaseCodes_MM_001 = 100;

	private char OkEditsw;
	private String WorkEvaluationDate;
	private char WkMemIsAllocated;
	private String ExpReasonCode;
	private String ExpReturnCode;
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// MISC DECLARATIONS AND PROTOTYPES
	// FOLLOW AS NEEDED:
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// +-> B25EX709_SHM_BS_CDS_LIST 03/11/2020 16:48
	// ! IMPORTS:
	// ! Work View imp_filter eww_supplied (Transient, Optional,
	// ! Import only)
	// ! evaluation_date
	// ! EXPORTS:
	// ! Work View exp eww_component (Transient, Export only)
	// ! return_code
	// ! reason_code
	// ! severity_code
	// ! rollback_indicator
	// ! origin_servid
	// ! Work View exp eww_supplied (Transient, Export only)
	// ! evaluation_date
	// ! Group View (100) exp_grp_base_codes
	// ! Entity View exp_grp_base_code ich1_charge_base
	// ! (Transient, Export only)
	// ! base_code
	// ! owning_charge_code
	// !
	// ! EXTERNAL ACTION BLOCK
	// !
	// 1 ! NOTE:
	// 1 !
	// 1 ! **************************************************************
	// 1 ! **
	// 1 ! Maintenance History:
	// 1 !
	// 1 ! MRF/RAF DATE INT LVL COMMENT
	// 1 ! G60024 11/03/02 JMGC 001 New program
	// 1 ! PDX3304 04/07/11 NAV 002 EXP_GRP_BASE_CODES
	// 1 ! group view size is changed from 55 to 100
	// 1 !
	// 1 ! **************************************************************
	// 1 ! **
	// 2 !
	// 3 ! NOTE:
	// 3 ! PRE-CONDITION:
	// 3 ! Valid instances of Charge Bases exist.
	// 3 !
	// 3 ! POST-CONDITION:
	// 3 ! List of all charges that own Bases are returned.
	// 3 !
	// 3 ! RETURN_CODE = +1/1
	// 3 !
	// 4 ! NOTE:
	// 4 ! PRE-CONDITION:
	// 4 ! No valid instances of Charge Bases exist.
	// 4 !
	// 4 ! POST-CONDITION:
	// 4 ! The group view returned is empty.
	// 4 !
	// 4 ! RETURN_CODE = +1/2
	// 4 !
	// 5 ! NOTE:
	// 5 ! RETURN/REASON CODES
	// 5 ! +1/1 Processing Successful
	// 5 ! +1/2 List Empty
	// 5 !
	// 6 !
	// 7 !
	// +---

	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// CONSTRUCTOR FOR THE CLASS
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	public B25EX709() {
		iefCGenRlse = "CA Gen 8.6";
		ssCopyright = "Copyright (c) 2020 CA Technologies. All rights reserved.";
		iefCGenDate = "2020/03/11";
		iefCGenTime = "16:48:32";
		iefCGenEncy = "9.2.A6";
		iefCGenUserId = "YWH0NKF";
		iefCGenModel = "EWW CHG CHARGES 01 02 D";
		iefCGenSubset = "ALL                             ";
		iefCGenName = "B25EX709_SHM_BS_CDS_LIST";
		nestingLevel = 0;
		valChkDeadlockTimeout = false;
		valChkDBError = false;
	}
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// ACTION BLOCK FUNCTION DECLARATIONS
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	public void B25EX709(Object in_runtime_parm1, IRuntimePStepContext in_runtime_parm2, GlobData in_globdata,
			B25EX709_IA import_view, B25EX709_OA export_view) {
		iefRuntimeParm1 = in_runtime_parm1;
		iefRuntimeParm2 = in_runtime_parm2;
		globdata = in_globdata;
		w_ia = import_view;
		w_oa = export_view;
		_B25EX709();
	}

	private void _B25EX709() {

		try {
			f_22020400();
		} catch (ABException e) {
		}
	}

	public void f_22020400() throws ABException {

		// User-written code should be inserted here
		ExpGrpBaseCodes_PS_001 = 1;
		w_oa.ExpEwwComponentReturnCode = +1;
		w_oa.ExpEwwComponentReasonCode = +1;

		String currentDate = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
		OkEditsw = 'Y';

		if (w_ia.ImpFilterEwwSuppliedEvaluationDate <= 0) {

			w_oa.ExpEwwComponentReasonCode = +3;
			WorkEvaluationDate = currentDate;
		} else {
			w_oa.ExpEwwComponentReasonCode = +1;
			WorkEvaluationDate = String.valueOf(w_ia.ImpFilterEwwSuppliedEvaluationDate);
		}

		if (OkEditsw == 'Y') {

			// from B25EX704
			System.out.println("REFERENCE CHG BASES IN CORE MEMORY");
			w_oa.ExpEwwComponentReturnCode = +1;
			w_oa.ExpEwwComponentReasonCode = +1;
			WkMemIsAllocated = 'N';
			// B25EX704 ends

			w_oa.ExpEwwComponentReasonCode = Integer.parseInt(ExpReasonCode);
			w_oa.ExpEwwComponentReturnCode = Integer.parseInt(ExpReturnCode);
		}

		if (w_oa.ExpEwwComponentReasonCode == +1) {
			w_oa.ExpEwwComponentReasonCode = Integer.parseInt(WorkEvaluationDate);
		} else {
			w_oa.ExpEwwComponentReasonCode = w_ia.ImpFilterEwwSuppliedEvaluationDate;
		}

	}
}// end class
